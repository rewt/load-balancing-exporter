opentelemetry-collector:
  nameOverride: "dev-opentelemetry-backend-collector"
  fullnameOverride: "dev-opentelemetry-backend-collector-headless"

  additionalLabels:
    app.kubernetes.io/name: dev-opentelemetry-backend
    app.kubernetes.io/component: opentelemetry-collector

  mode: statefulset

  replicaCount: 9
  revisionHistoryLimit: 10

  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
    tag: 0.126.0
    pullPolicy: IfNotPresent

  command:
    name: "otelcol-contrib" 

  serviceAccount:
    create: false
    name: "app"

  resources:
    limits:
      cpu: "1000m"
      memory: "2Gi"
    requests:
      cpu: "1000m" 
      memory: "2Gi"

  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 3
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 65
    behavior:
      scaleUp:
        stabilizationWindowSeconds: 30
        policies:
          - type: Pods
            value: 2
            periodSeconds: 15
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
          - type: Pods
            value: 1
            periodSeconds: 60

  podDisruptionBudget:
    enabled: true
    minAvailable: 2

  topologySpreadConstraints:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/name: dev-opentelemetry-backend
          app.kubernetes.io/component: opentelemetry-collector
    - maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
      labelSelector:
        matchLabels:
          app.kubernetes.io/name: dev-opentelemetry-backend
          app.kubernetes.io/component: opentelemetry-collector

  statefulset:
    podManagementPolicy: "Parallel"
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenDeleted: Retain
      whenScaled: Retain

  clusterRole:
    create: true
    rules:
      - apiGroups: [""]
        resources: ["endpoints"]
        verbs: ["get", "list", "watch"]
    annotations: {}
    clusterRoleBinding:
      annotations: {}

  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    processors:
      tail_sampling:
        num_traces: 10000
        decision_wait: 10s
        policies:
          - name: error-policy
            type: and
            and:
              and_sub_policy:
                - name: error-status
                  type: status_code
                  status_code:
                    status_codes: [ERROR]
                - name: error-sampling
                  type: probabilistic
                  probabilistic:
                    sampling_percentage: 100
          - name: latency-policy
            type: and
            and:
              and_sub_policy:
                - name: high-latency
                  type: latency
                  latency:
                    threshold_ms: 1000
                - name: latency-sampling
                  type: probabilistic
                  probabilistic:
                    sampling_percentage: 100
          - name: normal-policy
            type: probabilistic
            probabilistic:
              sampling_percentage: 10
      batch:
        send_batch_size: 20000
        timeout: 5s
        send_batch_max_size: 25000
    exporters:
      googlecloud:
        project: gcp-dev-otel
    service:
      telemetry:
        metrics:
          address: ""
          level: detailed
          readers:
            - pull:
                exporter:
                  prometheus:
                    host: "0.0.0.0"
                    port: 8888
        logs:
          level: info
      extensions:
        - health_check
      pipelines:
        traces:
          receivers:
            - otlp
          processors:
            - tail_sampling
            - batch
          exporters:
            - googlecloud

  ports:
    otlp:
      enabled: true
      containerPort: 4317
      servicePort: 4317
      protocol: TCP
      appProtocol: grpc
    otlp-http:
      enabled: true
      containerPort: 4318
      servicePort: 4318
      protocol: TCP
    metrics:
      enabled: true
      containerPort: 8888
      servicePort: 8888
      protocol: TCP
    jaeger-compact:
      enabled: false
    jaeger-grpc:
      enabled: false
    jaeger-thrift:
      enabled: false
    zipkin:
      enabled: false

  service:
    enabled: true
    type: ClusterIP
    clusterIP: None
